{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","http.js","ui.js","app.js"],"names":["EasyHTTP","url","fetch","response","json","resData","data","method","headers","body","JSON","stringify","http","UI","post","document","querySelector","titleInput","bodyInput","idInput","postsSubmit","forState","posts","output","forEach","title","id","innerHTML","message","className","clearAlert","div","createElement","appendChild","createTextNode","container","insertBefore","setTimeout","currentAlert","remove","value","changeFormState","vale","type","textContent","button","formEnd","clearIdInput","clearFields","ui","addEventListener","getPosts","submitPost","deletePost","enableEdit","cancelEdit","get","then","showPosts","catch","err","console","log","showAlert","put","e","preventDefault","target","parentElement","classList","contains","dataset","confirm","delete","previousElementSibling","fillForm"],"mappings":";AAAA;AGAA,AHCA;AACA;AGDA,AHEA;AACA;AGFA,AHGA;AACA;AGFA,AHGA;AGFAe,AHGA,QGHQ,CAACmC,gBAAT,CAA0B,kBAA1B,EAA8CC,QAA9C,GAEA;AHEA;AGDApC,AHEA,QGFQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCkC,gBAAvC,CAAwD,OAAxD,EAAiEE,UAAjE,GAEA;AHCA;AGAArC,AHCA,IEZMF,ICWE,CAACG,aAAT,CAAuB,QAAvB,EAAiCkC,gBAAjC,CAAkD,OAAlD,EAA2DG,UAA3D,GAEA;AHAA,AEZE,gBAAc;ACahBtC,AHAA,AEbgB,QCaR,CAACC,aAAT,CAAuB,QAAvB,EAAiCkC,gBAAjC,CAAkD,OAAlD,EAA2DI,UAA3D,GAEA;AHDA;AGEAvC,AHDA,AEdI,IDFEf,IEiBE,CAACgB,ADfAF,IAAL,GAAYC,MCehB,CAAuB,CDfC,CAACC,aAAT,CCehB,ADfuC,ECeEkC,MDfzB,CAAZ,SCeJ,CAA0D,OAA1D,EAAmEK,UAAnE,GAEA;AHFA,AEdI,SAAKtC,UAAL,GAAkBF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB;ACiBJ,AHFA,AEdI,SCgBKmC,ADhBAjC,QCgBT,CDhBI,ECgBgB,CDhBCH,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAjB;ACiBFJ,AHFF,AEdI,SAAKO,ICiBJqC,GADH,ADhBE,CCiBK,EDjBUzC,QAAQ,CAACC,aAAT,CAAuB,ICgBxC,CDhBiB,CCkBdyC,ADlBD,ICgBF,CAEQ,UAACnD,IAAD;AAAA,AHHV,AEdI,SAAKc,ECiBW6B,OAAGS,EDjBnB,GAAmB3C,ICiBH,CAAaT,GDjBF,CCiBX,ADjBYU,CCiBtB,YDjBa,CAAuB,cAAvB,CAAnB;ACiBM,AHFV,AEdI,GCcF,EAGG2C,IDjBItC,CCcP,CAGS,MDjBP,GAAgB,CCiBRuC,GAAD,CDjBP;ACiBO,AHFX,AEdG,IAED,OCckBC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,AHDX,GGFE,QFpBA;AEwBD,AHDD,EGGA;AHFA,yECvBE,iBAAU3D,GAAV;AAAA,ADwBF;AGEA,AF1BE,ADyBF,SGCSmD,EDjBP,QCiBF,GAAsB,QDjBV9B,KAAV,EAAiB;ACkBjB,AF3BA,AD0BF,AEhBI,MCiBIG,IDjBAF,CCiBK,GAAGR,EDjBF,KAAV,CCiBoB,CAACC,aAAT,CAAuB,QAAvB,EAAiCwB,KAA/C;AACA,AF5BA,AD2BF,AEfIlB,MCgBIb,ADhBJa,ICgBQ,CDhBH,CAACE,CCgBKT,MDhBX,CAAc,CCgBK,CAACC,QDhBLF,IAAD,CCgBH,CAAuB,ADhBV,OCgBb,EAAgC0B,KAA7C;AACA,AF7BA,AD4BF,AEfMjB,MCgBEG,EAAE,ADhBJH,GCgBOR,GDhBD,KCgBS,CAACC,aAAT,CAAuB,KAAvB,EAA8BwB,KAAzC,mFDdmC1B,IAAI,CAACW,KAF9B,uDAGuBX,IAAI,CAACL,IAH5B,gFAI8CK,IAAI,CAACY,EAJnD,+JAQ4DZ,IAAI,CAACY,EARjE,sGAAN;ADbJ,AD6BF,AEHK,OAdD;ACmBF,AF/BA,AD8BF,AEFI,MCGED,KAAK,ADHFX,IAAL,CCGY,ADHFa,ECGR,IAAgBlB,CF9BKP,EC2BvB,CCGsB,EF9BM,AC2BNqB,CD3BOtB,EE8BF,CF9BC,CE8B9B,AF/BA,CC4BE,CCG+B;AAC/BgD,AHDJ,AEFG,MAED,KCCKc,SAAH,CAAa,6BAAb,EAA4C,oBAA5C;AACD,AFjCD,ADgCF,GGDE,MAEO;AACL,AFjCM5D,ADgCV,QGCUG,IAAI,GAAG,CFjCPH,QADR;AEmCIsB,AFnCJ,ADkCF,MGCMA,KAAK,EAALA,KADW;AAEXhB,AFpCJ,ADmCF,MGCMA,IAAI,CDJR,CCIIA,WFlCoBN,OC8BdyB,CD9BsB,CAACxB,IAAT,CC8BxB,CDhCA,CCgCmByB,SAAnB,EAA8B;ACEf,AHEjB,AEJgC,KCE5B,CADK,CAKL;AFtCF,ADqCF;AGEI,AFrCMxB,ADoCV,AELI,QCMIqB,EAAE,CDNDI,ICMM,CFrCLzB,CEqCN,EAAe,EDNf,EDjCF,CCgC8B,CAG5B;ACKE,AFxCJ,ADuCF,iDCpCWA,OAHT;AEyCIO,AHDN,AEJI,UAAMmB,GAAG,GAAGhB,CCMPD,IADH,CACQ,EDNU,CAACkB,aAAT,CAAuB,KAAvB,CAAZ,CAJ4B,CAK5B,ICIE,EACuC1B,IADvC,EAEGmD,IAFH,CAEQ,UAACnD,IAAD,EAAU;AACd2C,AF5CR,ADyCF,eGGac,SAAH,CAAa,YAAb,EAA2B,qBAA3B;AF5CR,AD0CF,AEJIhC,MAAAA,GAAG,CAACF,SAAJ,GAAgBA,SAAhB,CAN4B,CAO5B;ACMMoB,AF7CR,AD2CF,eGEaD,WAAH;AF7CR,AD4CF,AEJIjB,MAAAA,GAAG,CAACE,WAAJ,CAAgBlB,QAAQ,CAACmB,cAAT,CAAwBN,OAAxB,CAAhB,EAR4B,CAS5B;ACKMuB,AF9CR,AD6CF,QGCUA,QAAQ;AACT,AF/CP,AD8CF,AEJI,OCDE,EAOGQ,CDNCxB,ICDJ,CAOS,IDNI,GAAGpB,GCMN6C,GAAD,EDNe,CAAC5C,aAAT,CAAuB,iBAAvB,CAAlB,CAV4B,CAW5B;ACKW,AFhDb,AD+CF,eGCwB6C,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,AHAf,AEJI,OCHE,GDGItC,KAAK,GAAGP,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd,CAZ4B,CAa5B;ACIC,AHAL,KGVI,MAUO;AACL,AHAN,AEJImB,MAAAA,SAAS,CAACC,YAAV,CAAuBL,GAAvB,EAA4BT,KAA5B,EAd4B,CAgB5B;ACGEV,AHAN,iBGCSoD,GADH,uCACsCtC,EADtC,GAC4CpB,IAD5C,EAEGmD,IAFH,CAEQ,UAACnD,IAAD,EAAU;AACd2C,AHFV,AEHIZ,MAAAA,SCKS0B,CDLC,CAAC,OCKL,CAAa,IDLF,UCKX,EAA6B,qBAA7B;AHDV,AEHM,QAAA,KAAI,CAACjC,UAAL;ACKImB,AHDV,AEHK,OAFS,CD3CZ,CC6CK,IAFO,CAAV,CCMSR,eAAH,CAAmB,KAAnB;AHAV,AEHG,MAED;ACEQU,AHAV,QGAUA,QAAQ;AACT,AHAT,OGNM,EAOGQ,KAPH,CAOS,UAACC,GAAD;AAAA,AHAf,eGAwBC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,AHCf,OGRM,IDIJ,sBAAa,yCDhDb,kBAAW3D,GAAX,EAAgBK,IAAhB;AEoDG,AFpDH,ADqDF,AEJI,UAAMgC,YAAY,GAAGvB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAArB;ACID,AFrDD,ADsDF;AGAC,AFtDC,ADuDF,AEJI,ECKJ,QDLQsB,YAAJ,EAAkB;ADnDpB,ADwDF,AEJMA,QAAAA,YAAY,CAACC,MAAb;ADpDJ,ADyDF,AEJK;ACIL,AFzDE,AD0DF,AEJG,MAED,GCCOc,UAAT,CAAoBY,CAApB,EAAuB;AACrBA,AF1DA,AD2DF,EGDEA,CAAC,CAACC,cAAF,KFzDyBhE,KAAK,CAACD,GAAD,EAAM;AAChCM,AD0DN,kBC1DMA,MAAM,EAAE,MADwB;AE2DpC,AFzDIC,AD0DN,MGDMyD,CAAC,CAACE,MAAF,CAASC,GFzDT5D,OAAO,EAAE,CEyDT,CAAuB6D,SAAvB,CAAiCC,QAAjC,CAA0C,QAA1C,CAAJ,EAAyD;AACvD,AFzDI,AD0DR,QGDU5C,EAAE,CDJV,ECIauC,CAAC,CAACE,MAAF,CAASC,YDJR,CCID,CAAuBG,AFzDd,OEyDT,CAA+B7C,EAA1C;AF1DW,AD4Df,AELI,WAAKT,QDzD6B,ECyDlC,CAAgBuB,KAAhB,GAAwB,EAAxB;ACIA,AFxDE/B,AD0DN,AELI,QCGI+D,GDHCtD,ICGM,CAAC,EFxDVT,ECqDF,CAAe+B,CDrDT,EAAE9B,ECqDR,EDrDY,CAACC,ACqDU,ECGZ,ADHX,CCGA,EAA8B,IFxDtB,CAAeL,IAAf;AEyDNM,AF9DgC,ADgEtC,AELG,MAED,WCCS6D,AF9DqB,CAD9B,KE+DI,uCAA2C/C,EAA3C,GAAiD+B,IAAjD,CAAsD,UAACnD,IAAD,EAAU;AAC9D2C,AHER,eGFWc,SAAH,CAAa,cAAb,EAA6B,qBAA7B;AFhEN,ADmEF;AGFQZ,AFhEEhD,ADmEV,QGHQgD,QAAQ,AFhENhD,QADR;AEkEK,AFlEL,ADqEF,OGNM,IDAJ,kBAASG,IAAT,EAAe;ACIZ,AFnEH,ADsEF,AENI,WAAKW,UAAL,CAAgBuB,CDvDMrC,ICuDtB,GAAwBG,CDvDM,CAACF,ECuDH,CAACqB,CDvDP,EATxB,ECgEE;ACID,AHGH,AENI,WAAKP,SAAL,CAAesB,KAAf,GAAuBlC,IAAI,CAACG,IAA5B;ACIH,AFrEC,ADwEF,AENI,ECKJ,SDLSU,OAAL,CAAaqB,KAAb,GAAqBlC,IAAI,CAACoB,EAA1B;ADzDMrB,ADgEV,AELI,WAAKoC,KD3DCpC,OATR,GCoEE,CAAqB,MAArB;ADpEF,AD0EF,AELG,MAED,4CD7DSA,OAVT;AEwEF,AHGA,SGHSiD,UAAT,CAAoBW,CAApB,EAAuB;AACrB,AFzEA,AD4EF,MGHMA,CAAC,CAACE,MAAF,CAASC,aAAT,CAAuBC,SAAvB,CAAiCC,QAAjC,CAA0C,MAA1C,CAAJ,EAAuD;AACrD,AF1EF,AD6EF,QGHU5C,EAAE,GAAGuC,CAAC,CAACE,MAAF,CAASC,aAAT,CAAuBG,OAAvB,CAA+B7C,EAA1C;AACA,AF3EF,AD8EF,QGHUjB,GDHR,CCGY,GAAGwD,CAAC,CAACE,MAAF,CAASC,WDHT,ECGA,CAAuBM,sBAAvB,CAA8C9B,WAA3D;AACA,AF5EF,AD+EF,AENI,QCGMnB,GDHDN,ECGM,GACT8C,CAAC,CAACE,ADJJ,CAAazB,IAAb,CCIE,CAAS0B,CDJS,EAApB,UCIE,CAAuBM,sBAAvB,CAA8CA,sBAA9C,CACG9B,WAFL;AAIA,AFhFF,ADgFF,AENG,MAED,ECIQtC,IAAI,GAAG;AACXoB,AFjFJ,ADiFF,MGAMA,EAAE,EAAFA,EADW;AAEXD,AFlFJ,ADkFF,MGAMA,KAAK,EAALA,KAFW;AAGXhB,AHAN,MGAMA,IAAI,EAAJA;AAHW,AHIjB,KGJI,CAPqD,CAarD,IDTF,yBAAgBkC,IAAhB,EAAsB;AFQxB,AEPI,UAAIA,IAAI,KAAK,MAAb,EAAqB;ACSrBM,AHDJ,AEPM,WCQC0B,EDRIvD,MCQP,CAAYd,IAAZ,ADRE,CAAiBsC,WAAjB,GAA+B,aAA/B;ACSH,AHDH,AEPM,aAAKxB,WAAL,CAAiBS,SAAjB,GAA6B,6BAA7B,CAFmB,CAInB;AFMN;AGCEoC,AHAF,AENM,ECMJA,CAAC,CAACC,IF5EF,ICsEUrB,MCMV,ADNgB,GAAG9B,QAAQ,CAACiB,aAAT,CAAuB,QAAvB,CAAf;ACOL,AHAD,AENMa,ECQN,MDRMA,MAAM,CAAChB,SAAP,GAAmB,2BAAnB;AFON,AENMgB,QAAAA,MAAM,CAACZ,WAAP,CAAmBlB,QAAQ,CAACmB,cAAT,CAAwB,aAAxB,CAAnB,EAPmB,CASnB;AFKN;AGCA,AHAA,AELM,SCKGqB,GDLGxB,GAAG,GAAGhB,CCKlB,CAAoBkD,CAApB,EAAuB,GDLG,CAACjD,aAAT,CAAuB,gBAAvB,CAAZ,CAVmB,CAWnB;ACKJ,AHAF,MGAMiD,CAAC,CAACE,MAAF,CAASE,SAAT,CAAmBC,QAAnB,CAA4B,aAA5B,CAAJ,EAAgD,uBFhFhD,kBAAUrE,GAAV,EAAeK,IAAf;AEiFE2C,AFjFF,ADiFF,AELM,WCKCR,CDLKK,OAAO,GAAG/B,ICKlB,CAAmB,GDLO,CAACC,CCK3B,YDLkB,CAAuB,WAAvB,CAAhB,CAZmB,CAanB;ACKH,AFlFD,ADkFF;AClFE,ADmFF,AELMe,QAAAA,GAAG,CAACK,YAAJ,CAAiBS,MAAjB,EAAyBC,OAAzB;ACMJmB,AFpFA,ADoFF,AELK,ECKHA,CAAC,CAACC,GDpBA,MAeO,KCKT;AACD,AFrFC,ADqFF,AELM,aAAK9C,WAAL,CAAiBwB,WAAjB,GAA+B,SAA/B;ADhFJ,ADsFF,AELM,aAAKxB,WAAL,CAAiBS,SAAjB,GAA6B,6BAA7B,CAFK,CAGL;ADlFJ,ADuFF,uBCtF2B3B,KAAK,CAACD,GAAD,EAAM;AAChCM,ADsFN,AELM,YAAIQ,MDjFJR,ECiFY,CAACS,GDjFP,EAAE,KADwB,GCkF5B,CAAuB,cAAvB,CAAJ,EAA4C;ADhF5CR,ADsFN,AELQO,UAAAA,QDjFFP,ACiFU,CAACQ,MDjFJ,EAAE,KCiFP,CAAuB,cAAvB,EAAuCuB,MAAvC;ADhFA,ADsFR,AELO,SANI,CAOL,0BDlFkB;AADT,ADwFf,mBC1FsC;AAKhC9B,ADsFN,kBCtFMA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAL0B,AD4FtC,AENM,aAAKyC,IDtFqB,CAD9B,OCuFI,GARK,CASL;AFMN;AC9FE,AD+FF,AENM,aAAKC,WAAL;ADxFI7C,AD+FV,AENK,gBDzFKA,QADR;AAAA,ADiGF,AENG;AD3FD,ADkGF,uBCzF0BA,QAAQ,CAACC,IAAT,EATxB;ADmGF;ACnGE,ADoGF;AC3FUC,AD4FV,gBC5FUA,OATR;AAAA,ADsGF,kDC5FWA,OAVT;ADuGF,AETO,IAAM4C,EAAE,GAAG,IAAIpC,EAAJ,EAAX;AD9FL,ADwGF;ACxGE,ADyGF;ACzGE,AD0GF;AC1GE,AD2GF;AC3GE,AD4GF;AC5GE,AD6GF;AC7GE,AD8GF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QCxGE;ADyGF;AACA;AACA;AACA;AACA,6EC5GE,kBAAaZ,GAAb;AAAA,AD6GF;AC7GE,AD8GF;AC9GE,AD+GF;AC/GE,ADgHF;AChHE,ADiHF;ACjHE,ADkHF;AClHE,ADmHF,uBClH2BC,KAAK,CAACD,GAAD,EAAM;AAChCM,ADkHN,kBClHMA,MAAM,EAAE,QADwB;AAEhCC,ADkHN,kBClHMA,OAAO,EAAE;AACP,ADkHR,oCClHwB;AADT,ADoHf;ACtHsC,ADuHtC,iBCvHgC,CAD9B;ADyHF;ACzHE,AD0HF;ACzHUL,AD0HV,gBC1HUA,QADR;AAAA,AD4HF;AC5HE,AD6HF,uBCrH0B,qBARxB;AD8HF;AC9HE,AD+HF;ACvHUE,ADwHV,gBCxHUA,OARR;AAAA,ADiIF,kDCxHWA,OATT;ADkIF;AClIE,ADmIF;ACnIE,ADoIF;ACpIE,ADqIF;ACrIE,ADsIF;ACtIE,ADuIF;ACvIE,ADwIF;ACxIE,ADyIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxIO,ADyIP,ICzIaO,IAAI,GAAG,IAAIZ,QAAJ,EAAbfile":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","class EasyHTTP {\n  // Make an HTTP GET Request\n  async get(url) {\n    const response = await fetch(url);\n    const resData = await response.json();\n    return resData;\n  }\n\n  // Make an HTTP POST Request\n  async post(url, data) {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    const resData = await response.json();\n    return resData;\n  }\n\n  // Make an HTTP PUT Request\n  async put(url, data) {\n    const response = await fetch(url, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    const resData = await response.json();\n    return resData;\n  }\n\n  // Make an HTTP DELETE Request\n  async delete(url) {\n    const response = await fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    });\n\n    const resData = await \"Resource Deleted...\";\n    return resData;\n  }\n}\n\nexport const http = new EasyHTTP();\n","class UI {\n  constructor() {\n    this.post = document.querySelector(\"#posts\");\n    this.titleInput = document.querySelector(\"#title\");\n    this.bodyInput = document.querySelector(\"#body\");\n    this.idInput = document.querySelector(\"#id\");\n    this.postsSubmit = document.querySelector(\".post-submit\");\n    this.forState = \"add\";\n  }\n\n  //Show posts\n  showPosts(posts) {\n    let output = ``;\n\n    posts.forEach((post) => {\n      output += `<div class=\"card mb-3\">\n          <div class=\"card-body\">\n            <h4 class=\"card-title\">${post.title}</h4>\n            <p class=\"card-text\">${post.body}</p>\n            <a href=\"#\" class=\"edit card-link\" data-id=\"${post.id}\">\n              <i class=\"fa fa-pencil\"></i>\n            </a>\n\n            <a href=\"#\" class=\"delete card-link text-danger\" data-id=\"${post.id}\">\n            <i class=\"fa fa-remove\"></i>\n          </a>\n          </div>\n        </div>`;\n    });\n\n    this.post.innerHTML = output;\n  }\n\n  // Show alert message\n  showAlert(message, className) {\n    this.clearAlert();\n\n    // Create div\n    const div = document.createElement(\"div\");\n    // Add classes\n    div.className = className;\n    // Add text\n    div.appendChild(document.createTextNode(message));\n    // Get parent\n    const container = document.querySelector(\".postsContainer\");\n    // Get posts\n    const posts = document.querySelector(\"#posts\");\n    // Insert alert div\n    container.insertBefore(div, posts);\n\n    // Timeout\n    setTimeout(() => {\n      this.clearAlert();\n    }, 3000);\n  }\n\n  // Clear alert message\n  clearAlert() {\n    const currentAlert = document.querySelector(\".alert\");\n\n    if (currentAlert) {\n      currentAlert.remove();\n    }\n  }\n\n  // Clear all fields\n  clearFields() {\n    this.titleInput.value = \"\";\n    this.bodyInput.value = \"\";\n  }\n\n  // Fill form to edit\n  fillForm(data) {\n    this.titleInput.value = data.title;\n    this.bodyInput.value = data.body;\n    this.idInput.value = data.id;\n\n    this.changeFormState(\"edit\");\n  }\n\n  // Clear Id hidden value\n  clearIdInput() {\n    this.idInput.vale = \"\";\n  }\n\n  // Change the form state\n  changeFormState(type) {\n    if (type === \"edit\") {\n      this.postsSubmit.textContent = \"Update Post\";\n      this.postsSubmit.className = \"post-submit btn btn-warning\";\n\n      //Create a Cancel button\n      const button = document.createElement(\"button\");\n      button.className = \"post-cancel btn btn-light\";\n      button.appendChild(document.createTextNode(\"Cancel Edit\"));\n\n      //Get Parent\n      const div = document.querySelector(\"#btn-container\");\n      // get element to insert before\n      const formEnd = document.querySelector(\".form-end\");\n      //Insert Cancel Button\n      div.insertBefore(button, formEnd);\n    } else {\n      this.postsSubmit.textContent = \"Post It\";\n      this.postsSubmit.className = \"post-submit btn btn-primary\";\n      // Remove cancel button if it is there\n      if (document.querySelector(\".post-cancel\")) {\n        document.querySelector(\".post-cancel\").remove();\n      }\n      // Clear id from hidden field\n      this.clearIdInput();\n      // Clear text\n      this.clearFields();\n    }\n  }\n}\n\nexport const ui = new UI();\n","import \"regenerator-runtime/runtime\";\nimport { http } from \"./http\";\nimport { ui } from \"./ui.js\";\n\n//Get Posts on Dom load\ndocument.addEventListener(\"DOMContentLoaded\", getPosts);\n\n//Listen for add post\ndocument.querySelector(\".post-submit\").addEventListener(\"click\", submitPost);\n\n//Listen for delete\ndocument.querySelector(\"#posts\").addEventListener(\"click\", deletePost);\n\n//Listen for edit state\ndocument.querySelector(\"#posts\").addEventListener(\"click\", enableEdit);\n\n// Listen for cancel\ndocument.querySelector(\"#btn-container\").addEventListener(\"click\", cancelEdit);\n\n//Get Posts\nfunction getPosts() {\n  http\n    .get(\"http://localhost:3000/posts\")\n    .then((data) => ui.showPosts(data))\n    .catch((err) => console.log(err));\n}\n\n// Submit Post\nfunction submitPost() {\n  const title = document.querySelector(\"#title\").value;\n  const body = document.querySelector(\"#body\").value;\n  const id = document.querySelector(\"#id\").value;\n\n  if (title === \"\" || body === \"\") {\n    ui.showAlert(\"Please enter all the fields\", \"alert alert-danger\");\n  } else {\n    const data = {\n      title,\n      body,\n    };\n    // Check for ID\n    if (id === \"\") {\n      // Create Post\n      http\n        .post(\"http://localhost:3000/posts\", data)\n        .then((data) => {\n          ui.showAlert(\"Post added\", \"alert alert-success\");\n          ui.clearFields();\n          getPosts();\n        })\n        .catch((err) => console.log(err));\n    } else {\n      // Update Post\n      http\n        .put(`http://localhost:3000/posts/${id}`, data)\n        .then((data) => {\n          ui.showAlert(\"Post updated\", \"alert alert-success\");\n          ui.changeFormState(\"add\");\n          getPosts();\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n}\n\n//Delete Post\nfunction deletePost(e) {\n  e.preventDefault();\n\n  if (e.target.parentElement.classList.contains(\"delete\")) {\n    const id = e.target.parentElement.dataset.id;\n    if (confirm(\"Are you sure?\")) {\n      http.delete(`http://localhost:3000/posts/${id}`).then((data) => {\n        ui.showAlert(\"Post Removed\", \"alert alert-success\");\n        getPosts();\n      });\n    }\n  }\n}\n\n//Enable edit state\nfunction enableEdit(e) {\n  if (e.target.parentElement.classList.contains(\"edit\")) {\n    const id = e.target.parentElement.dataset.id;\n    const body = e.target.parentElement.previousElementSibling.textContent;\n    const title =\n      e.target.parentElement.previousElementSibling.previousElementSibling\n        .textContent;\n\n    const data = {\n      id,\n      title,\n      body,\n    };\n\n    //Fill form with current post\n    ui.fillForm(data);\n  }\n  e.preventDefault();\n}\n\n// Cancel Edit State\nfunction cancelEdit(e) {\n  if (e.target.classList.contains(\"post-cancel\")) {\n    ui.changeFormState(\"add\");\n  }\n\n  e.preventDefault();\n}\n"]}